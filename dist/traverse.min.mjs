var e={d:(t,s)=>{for(var n in s)e.o(s,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:s[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};e.d(t,{A:()=>n});const s=new WeakMap;function n(e){return s.get(e)??function(e){let t=1;class n{static NONE=0;static EXTERNPROTO_DECLARATIONS=t;static PROTO_DECLARATIONS=t<<=1;static ROOT_NODES=t<<=1;static IMPORTED_NODES=t<<=1;static EXTERNPROTO_DECLARATION_SCENE=t<<=1;static PROTO_DECLARATION_BODY=t<<=1;static PROTOTYPE_INSTANCES=t<<=1;static INLINE_SCENE=t<<=1;static ALL=(t<<1)-1;static traverse(t,s){const n=new Set;switch(!0){case t instanceof e.X3DExecutionContext:return this.#e(t,s,n);case t instanceof e.ExternProtoDeclarationArray:case t instanceof e.ProtoDeclarationArray:case t instanceof e.MFNode:case Array.isArray(t):return this.#t(t,s,n);case t instanceof e.SFNode:return this.#s(t.getValue(),s,n);case t instanceof e.X3DBaseNode:return this.#s(t,s,n)}}static*#e(e,t,s){if(e){if(t&n.EXTERNPROTO_DECLARATIONS)for(const n of e.externprotos)yield*this.#s(n,t,s);if(t&n.PROTO_DECLARATIONS)for(const n of e.protos)yield*this.#s(n,t,s);t&n.ROOT_NODES&&(yield*this.#t(e.rootNodes,t,s)),yield e}}static*#t(t,s,n){for(const i of t)yield*this.#s(i instanceof e.SFNode?i.getValue():i,s,n)}static*#s(t,s,i){if(!t)return;if(i.has(t))return;i.add(t),yield*this.#n(t.getUserDefinedFields(),s,i),yield*this.#n(t.getPredefinedFields(),s,i);const r=t.getType();for(let o=r.length-1;o>=0;--o){switch(r[o]){case e.X3DConstants.X3DExternProtoDeclaration:s&this.EXTERNPROTO_DECLARATION_SCENE&&(yield*this.#e(t.getInternalScene(),s,i));break;case e.X3DConstants.X3DProtoDeclaration:s&n.PROTO_DECLARATION_BODY&&(yield*this.#e(t.getBody(),s,i));break;case e.X3DConstants.X3DPrototypeInstance:s&n.PROTOTYPE_INSTANCES&&(yield*this.#e(t.getBody(),s,i));break;case e.X3DConstants.Inline:s&this.INLINE_SCENE&&(yield*this.#e(t.getInternalScene(),s,i));break;default:continue}break}yield t instanceof e.X3DNode?e.SFNodeCache.get(t):t}static*#n(t,s,n){for(const i of t)switch(i.getType()){case e.X3DConstants.SFNode:yield*this.#s(i.getValue(),s,n);break;case e.X3DConstants.MFNode:yield*this.#t(i,s,n)}}static find(e,t,s){const n=new Set;return this.#i(e,t,s,[],n)}static*#i(e,t,s,n,i){if(e){if(n.push(e),e===t)yield n.slice();else{if(s&this.EXTERNPROTO_DECLARATIONS){const r=e.getExternProtoDeclarations();for(const e of r)yield*this.#r(e,t,s,n,i)}if(s&this.PROTO_DECLARATIONS){const r=e.getProtoDeclarations();for(const e of r)yield*this.#r(e,t,s,n,i)}if(s&this.ROOT_NODES){const r=e.getRootNodes();for(const e of r)yield*this.#r(e.getValue(),t,s,n,i)}if(s&this.IMPORTED_NODES)for(const r of e.getImportedNodes()){if(n.push(r),r===t)yield n.slice();else try{const e=r.getExportedNode();yield*this.#r(e,t,s,n,i)}catch(e){}n.pop()}}n.pop()}}static*#r(t,s,n,i,r){if(t&&!r.has(t)){if(r.add(t),i.push(t),t.valueOf()===s.valueOf())yield i.slice();else{t.getType().includes(e.X3DConstants.X3DExternProtoDeclaration)||(yield*this.#o(t.getUserDefinedFields(),s,n,i,r),yield*this.#o(t.getPredefinedFields(),s,n,i,r));const o=t.getType();for(let a=o.length-1;a>=0;--a)switch(o[a]){case e.X3DConstants.X3DExternProtoDeclaration:n&this.EXTERNPROTO_DECLARATION_SCENE&&(yield*this.#i(t.getInternalScene(),s,n,i,r));break;case e.X3DConstants.X3DProtoDeclaration:n&this.PROTO_DECLARATION_BODY&&(yield*this.#i(t.getBody(),s,n,i,r));break;case e.X3DConstants.X3DPrototypeInstance:n&this.PROTOTYPE_INSTANCES&&(yield*this.#i(t.getBody(),s,n,i,r));break;case e.X3DConstants.Inline:n&this.INLINE_SCENE&&(yield*this.#i(t.getInternalScene(),s,n,i,r))}}i.pop(),r.delete(t)}}static*#o(t,s,n,i,r){for(const o of t){if(i.push(o),o===s)yield i.slice();else switch(o.getType()){case e.X3DConstants.SFNode:yield*this.#r(o.getValue(),s,n,i,r);break;case e.X3DConstants.MFNode:for(const e of o)yield*this.#r(e?.getValue(),s,n,i,r)}i.pop()}}}return e.SFNode.prototype.traverse=function(e){return n.traverse(this,e)},e.MFNode.prototype.traverse=function(e){return n.traverse(this,e)},e.X3DExecutionContext.prototype.traverse=function(e=n.ROOT_NODES){return n.traverse(this,e)},e.ProtoDeclarationArray.prototype.traverse=function(e=n.PROTO_DECLARATIONS){return n.traverse(this,e)},e.ExternProtoDeclarationArray.prototype.traverse=function(e=n.EXTERNPROTO_DECLARATIONS){return n.traverse(this,e)},e.X3DExecutionContext.prototype.find=function(e,t=n.ROOT_NODES){return n.find(this,e,t)},s.set(e,n),n}(e)}var i=t.A;export{i as default};